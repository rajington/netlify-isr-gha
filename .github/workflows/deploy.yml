name: Deploy

on:
  push:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      paths:
        description: 'Comman separated paths to generate'
        type: string
        required: true
        default: 'foo,bar,baz'

permissions:
  contents: read

concurrency:
  group: "deploy"
  cancel-in-progress: false

env:
  NODE_VERSION: 18.15.0

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.NODE_VERSION }}-nodemodules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
              ${{ runner.os }}-${{ env.NODE_VERSION }}-nodemodules-

      - name: Install dependencies
        run: yarn --frozen-lockfile
        if: steps.cache-node-modules.outputs.cache-hit != 'true'

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-

      - name: Build with Next.js
        run: yarn export
        env:
          PATHS: ${{ inputs.paths }}

      - name: Deploy to Netlify
        run: yarn deploy
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_TOKEN: ${{ secrets.NETLIFY_TOKEN }}
